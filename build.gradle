buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }
}

plugins {
    id "org.jetbrains.intellij" version "1.1.4"
    id "org.jetbrains.grammarkit" version "2021.1.3"
    id "org.jetbrains.kotlin.jvm" version "1.5.21"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "http://repository.jetbrains.com/all"
    }
}

ext.kotlinVersion = '1.5.21'
ext.junitVersion = '4.12'
ext.jacksonVersion = '2.9.8'
ext.markdownVersion = '0.1.31'

// ---------------
// JAVA AND KOTLIN

// JDK compatibility
sourceCompatibility = javaVersion
targetCompatibility = javaTargetVersion
tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

// Kotlin compatibility
compileKotlin {
    kotlinOptions {
        jvmTarget = javaTargetVersion
        languageVersion = "1.5"
        apiVersion = "1.5"
    }
}

def genRoot = file('gen')

sourceSets {
    main {
        kotlin.srcDir 'src/main/kotlin'
        java.srcDir genRoot
        resources.srcDir 'src/main/resources'
    }

    test {
        kotlin.srcDir 'src/test/kotlin'
        resources.srcDir 'src/test/resources'
    }
}

// ---------------------------------------------
// INTELLIJ (GRADLE STUFF FOR PLUGIN DEVELOPERS)

apply plugin: 'org.jetbrains.intellij'

intellij {
    version = intellijPlatformVersion
    pluginName = 'intellij-elm'
    updateSinceUntilBuild = false
}

// ------------------------------------------------
// IDEA (GRADLE STUFF FOR NORMAL INTELLIJ PROJECTS)

apply plugin: 'idea'

idea {
    project {
        jdkName = javaVersion
        languageLevel = javaVersion
    }
    module {
        generatedSourceDirs += genRoot
    }
}

// -----------
// GRAMMAR KIT

apply plugin: 'org.jetbrains.grammarkit'
import org.jetbrains.grammarkit.tasks.GenerateLexer
import org.jetbrains.grammarkit.tasks.GenerateParser

task generateElmLexer(type: GenerateLexer) {
    source = "src/main/grammars/ElmLexer.flex"
    targetDir = "gen/org/elm/lang/core/lexer/"
    targetClass = "_ElmLexer"
    purgeOldFiles = true
    skeleton = "src/main/grammars/lexer.skeleton"
}

task generateElmParser(type: GenerateParser) {
    source = "src/main/grammars/ElmParser.bnf"
    targetRoot = genRoot
    pathToParser = '/org/elm/lang/core/parser/ElmParser.java'
    pathToPsiRoot = '/org/elm/lang/core/psi'
    purgeOldFiles = true
}

task generateCode {
    dependsOn generateElmParser
    dependsOn generateElmLexer
}

// ----------------
// MY PLUGIN ITSELF

group 'org.elm'
version myPluginVersion

dependencies {
    compileOnly "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    compile 'com.github.ajalt:colormath:1.4.0'
    compile("org.jetbrains:markdown:$markdownVersion") {
        exclude module: "kotlin-runtime"
        exclude module: "kotlin-stdlib"
    }
    testCompile "junit:junit:$junitVersion"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
}

compileKotlin {
    dependsOn generateCode
}
